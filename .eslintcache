[{"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\App.js":"3","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\rootReducer.js":"4","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\routes.js":"5","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\addGameReducer.js":"6","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\authReducer.js":"7","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\calendarReducer.js":"8","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\navigationReducer.js":"9","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\mainRouter.js":"10","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\actions.js":"11","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\Create.js":"12","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\types.js":"13","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\Auth.js":"14","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\hooks\\http.hook.js":"15","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\CalendarPage.js":"16","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\AddGame.js":"17","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\toggle.js":"18","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\City.js":"19","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\CalendarItem.js":"20","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\SelectedDay.js":"21","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\PhoneMask.js":"22","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\Addres.js":"23"},{"size":878,"mtime":1619648767405,"results":"24","hashOfConfig":"25"},{"size":375,"mtime":1619648767409,"results":"26","hashOfConfig":"25"},{"size":262,"mtime":1619648767124,"results":"27","hashOfConfig":"25"},{"size":421,"mtime":1619648767408,"results":"28","hashOfConfig":"25"},{"size":1822,"mtime":1619648767409,"results":"29","hashOfConfig":"25"},{"size":930,"mtime":1619648767406,"results":"30","hashOfConfig":"25"},{"size":654,"mtime":1619648767407,"results":"31","hashOfConfig":"25"},{"size":1795,"mtime":1619648767407,"results":"32","hashOfConfig":"25"},{"size":370,"mtime":1619648767408,"results":"33","hashOfConfig":"25"},{"size":3709,"mtime":1619648767405,"results":"34","hashOfConfig":"25"},{"size":2064,"mtime":1619648767406,"results":"35","hashOfConfig":"25"},{"size":2581,"mtime":1619771572917,"results":"36","hashOfConfig":"25"},{"size":520,"mtime":1619648767409,"results":"37","hashOfConfig":"25"},{"size":1700,"mtime":1619648767126,"results":"38","hashOfConfig":"25"},{"size":1427,"mtime":1619648767404,"results":"39","hashOfConfig":"25"},{"size":694,"mtime":1619648767126,"results":"40","hashOfConfig":"25"},{"size":10231,"mtime":1619648767125,"results":"41","hashOfConfig":"25"},{"size":2180,"mtime":1619648767404,"results":"42","hashOfConfig":"25"},{"size":2305,"mtime":1619648767401,"results":"43","hashOfConfig":"25"},{"size":4967,"mtime":1619648767126,"results":"44","hashOfConfig":"25"},{"size":2545,"mtime":1619648767127,"results":"45","hashOfConfig":"25"},{"size":8930,"mtime":1619648767403,"results":"46","hashOfConfig":"25"},{"size":3805,"mtime":1619648767401,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1802i47",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\index.js",[],["107","108"],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\App.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\rootReducer.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\routes.js",["109","110"],"import React, { useEffect,useState } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport Auth from './Pages/Auth'\r\nimport CreateCity from './Pages/Create'\r\nimport { login } from './redux/actions'\r\nimport { useHttp } from './hooks/http.hook'\r\nimport MainRouter from './mainRouter'\r\n\r\nconst useRoutes = ({isAuthenticated}) => {\r\n    const dispatch = useDispatch()\r\n    const {request,loading} = useHttp()\r\n    const [loaded, setLoaded] = useState(false)\r\n    useEffect(()=>{\r\n        const token = localStorage.getItem('token')\r\n        if(token)reconnect(token)\r\n        else setLoaded(true)\r\n    },[])\r\n    const reconnect = async(token) => {\r\n        try {\r\n            const data = await request('api/auth/reconnect','POST',{},\r\n                {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            )\r\n            dispatch(login(data))\r\n            setLoaded(true)\r\n        } catch (error) {\r\n            console.log(error)\r\n            localStorage.removeItem('token')\r\n            setLoaded('true')\r\n        }\r\n    }\r\n    if(!loaded){\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n    if(isAuthenticated){\r\n        return(\r\n            <MainRouter></MainRouter>\r\n        )\r\n    }\r\n    \r\n        return(\r\n            <Switch>\r\n                <Route path='/auth' exact>\r\n                    <Auth></Auth>\r\n                </Route>\r\n                <Route path='/Create' exact>\r\n                    <CreateCity/>\r\n                </Route>\r\n                <Redirect to='/auth'/>\r\n            </Switch>\r\n        )\r\n    \r\n}\r\nconst mapStateToProps = state => {\r\n    return{\r\n        isAuthenticated: state.auth.isAuthenticated\r\n    }\r\n}\r\nexport default connect(mapStateToProps,null)(useRoutes)","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\addGameReducer.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\authReducer.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\calendarReducer.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\navigationReducer.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\mainRouter.js",["111"],"import { NavLink, Redirect, Route, Switch } from \"react-router-dom\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faBell, faBriefcase,  faHome, faUserCircle, faUserSecret } from \"@fortawesome/free-solid-svg-icons\"\r\nimport logo from './assets/logo.png';\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { resetAddGame, toggleNav } from \"./redux/actions\";\r\nimport CalendarPage from \"./Pages/CalendarPage\";\r\nimport AddGame from \"./Pages/AddGame\";\r\n\r\nconst MainRouter = ({state,navigation,addGame}) => {\r\n    const dispatch = useDispatch()\r\n    return(\r\n        <div className='content'>\r\n            <div className='header'>\r\n                <div className='leftSide'>\r\n                    <div className='iconBox bar'><FontAwesomeIcon icon={faBars}></FontAwesomeIcon></div>\r\n                    <div className='iconBox logo'><img src={logo} alt=\"\" /></div>\r\n                    <div className='nameTag'><h1>{state.city}</h1></div>\r\n                </div>\r\n                <div className=\"rightSide\">\r\n                    <div className=\"iconBox bell\"><FontAwesomeIcon icon={faBell}></FontAwesomeIcon></div>\r\n                    <div className=\"iconBox user\"><FontAwesomeIcon icon={faUserCircle} /></div>\r\n                </div>\r\n            </div>\r\n            <div className={navigation.isClosed?\"navigation\":\"navigation closed\"}>\r\n                <div className=\"navigationHead\">\r\n                    <div className='iconBox bar' onClick={()=>dispatch(toggleNav())}><FontAwesomeIcon icon={faBars}></FontAwesomeIcon></div>\r\n                </div>\r\n                <div className=\"navigationBody\">\r\n                    <ul>\r\n                        <NavLink activeClassName='selected' to=\"/calendarPage\"><li className='navItem'><div className=\"iconBox\"><FontAwesomeIcon icon={faHome}></FontAwesomeIcon></div> <p>Главная</p></li></NavLink>\r\n                        <NavLink activeClassName='selected' to=\"/leadsPage\"><li className='navItem'><div className=\"iconBox\"><FontAwesomeIcon icon={faUserCircle}></FontAwesomeIcon></div><p>Лиды</p></li></NavLink>\r\n                        <NavLink activeClassName='selected' to=\"/workersPage\"><li className='navItem'><div className=\"iconBox\"><FontAwesomeIcon icon={faUserSecret}></FontAwesomeIcon></div><p>Работники</p></li></NavLink>\r\n                        <NavLink activeClassName='selected' to=\"/DealsPage\"><li className='navItem'><div className=\"iconBox\"><FontAwesomeIcon icon={faBriefcase}></FontAwesomeIcon></div><p>Дела</p></li></NavLink>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className={navigation.isClosed?'cover on':'cover'} onClick={()=>dispatch(toggleNav())}></div>\r\n            <div className=\"contentBody\">\r\n                <Switch>\r\n                    <Route path='/calendarPage'>\r\n                        <CalendarPage></CalendarPage>\r\n                    </Route>\r\n                    <Route path='/leadsPage'>\r\n                        <div>Лиды</div>\r\n                    </Route>\r\n                    <Route path='/workersPage'>\r\n                        <div>Работники</div>\r\n                    </Route>\r\n                    <Route path='/DealsPage'>\r\n                        <div>Дела</div>\r\n                    </Route>\r\n                    <Redirect to='/calendarPage'></Redirect>\r\n                </Switch>\r\n            </div>\r\n            <AddGame></AddGame>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        state: state.auth,\r\n        navigation: state.navigation,\r\n        addGame: state.addGame\r\n    }\r\n}\r\nexport default connect(mapStateToProps,null)(MainRouter)","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\actions.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\Create.js",["112","113"],"import { useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useHttp } from \"../hooks/http.hook\"\r\nimport City from '../features/City';\r\nimport '../assets/input.css'\r\nimport logo from '../assets/logo.svg';\r\nimport toggle from '../features/toggle'\r\nconst CreateCity = () => {\r\n    const {addnote} = toggle()\r\n    const history = useHistory()\r\n    const {request} = useHttp()\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        password: '',\r\n        type: 2,\r\n        city: '',\r\n        name: '',\r\n        nameOfCity: ''\r\n    })\r\n    const handlechange = (e) => {\r\n        setData({...data, [e.target.name]: e.target.value})\r\n    }\r\n    const login = async() => { \r\n        try {\r\n            const res = await request('api/auth/createcity','POST', data)\r\n            addnote(res.message)\r\n        \r\n        } catch (e) {\r\n            console.log(e)\r\n        } \r\n    }\r\n    const handler = (e) => {\r\n        setData({...data, city: e})\r\n    }\r\n    return(\r\n        <div className='container'>\r\n            <div className=\"form\">\r\n                <h1>Форма добавления аккаунта города</h1>\r\n                <div className=\"input_block\">\r\n                    <input type=\"text\" className='input_form' onChange={handlechange} value={data.email} placeholder=' ' id='email' name='email' />\r\n                    <label htmlFor='email'>Логин</label>\r\n                </div>\r\n                <div className=\"input_block\">\r\n                    <input type=\"password\" className='input_form' onChange={handlechange} value={data.password} placeholder=' ' id='password' name='password' />\r\n                    <label htmlFor='password'>Пароль</label>\r\n                </div>\r\n                <div className=\"input_block\">\r\n                    <input type=\"text\" className='input_form' onChange={handlechange} value={data.name} placeholder=' ' id='name' name='name' />\r\n                    <label htmlFor='name'>Имя</label>\r\n                </div>\r\n                <div className=\"input_block\">\r\n                    <input type=\"text\" className='input_form' onChange={handlechange} value={data.nameOfCity} placeholder=' ' id='nameOfCity' name='nameOfCity' />\r\n                    <label htmlFor='name'>Название студии</label>\r\n                </div>\r\n                <City handler={handler}></City>\r\n                    <input  type=\"button\" className='input_button' name='button' onClick={login} value='Создать' />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateCity","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\redux\\types.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\Auth.js",["114"],"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useHttp } from \"../hooks/http.hook\"\r\nimport {login} from '../redux/actions';\r\nconst Auth = () => {\r\n    const {request,loading} = useHttp()\r\n    const dispatch = useDispatch()\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        password: ''\r\n    })\r\n    const handlechange = (e) => {\r\n        setData({...data, [e.target.name]: e.target.value})\r\n    }\r\n    const authentication = async() => {\r\n        try {\r\n                const res = await request('api/auth/login','POST', data)\r\n                console.log(res)\r\n                dispatch(login(res))\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    return(\r\n        <div className='authBox'>\r\n            <div className=\"authForm\">\r\n                <h1>Show Today App</h1>\r\n                <p>Вход</p>\r\n            <div className=\"input_block\">\r\n                    <input type=\"text\" className='input_form' onChange={handlechange} value={data.email} placeholder=' ' id='email' name='email' />\r\n                    <label htmlFor='email'>Логин</label>\r\n                </div>\r\n                <div className=\"input_block\">\r\n                    <input type=\"text\" className='input_form' onChange={handlechange} value={data.password} placeholder=' ' id='password' name='password' />\r\n                    <label htmlFor='password'>Пароль</label>\r\n                </div>\r\n                <input  type=\"button\" className='input_button' name='button' onClick={authentication} value='Войти' disabled={loading?'disabled':''}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Auth","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\hooks\\http.hook.js",["115"],"import {useState, useCallback} from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {toggle} from '../features/toggle'\r\nimport { logout } from '../redux/actions'\r\n\r\nexport const useHttp = () => {\r\n    const dispatch = useDispatch()\r\n    const {addnote} = toggle()\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try{\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n           const response = await fetch(url, {method, body, headers})\r\n           const data = await response.json()\r\n\r\n           if(!response.ok){\r\n               throw new Error(data.message || 'Что-то пошло не так')\r\n           }\r\n\r\n           setLoading(false)\r\n           return data\r\n        } catch(e){\r\n            if(e.hasOwnProperty('auth')){\r\n                if(e.auth === false){\r\n                    dispatch(logout())\r\n                }\r\n            }\r\n            console.log(e.message)\r\n            setLoading(false)\r\n            addnote(e.message)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n    return{loading, request, error, clearError}\r\n}","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\CalendarPage.js",["116","117","118","119"],"import { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport moment from 'moment'\r\nimport { useState } from 'react'\r\nimport '../assets/calendar.css'\r\nimport CalendarItem from './CalendarItem'\r\nimport SelectedDay from './SelectedDay'\r\n\r\nconst CalendarPage = () => {\r\n    return(\r\n        <div className=\"calendarPage\">\r\n            <div className=\"calendarBox\">\r\n                <CalendarItem></CalendarItem>\r\n            </div>\r\n            \r\n            <div className=\"dayBox\">\r\n                <SelectedDay></SelectedDay>\r\n            </div>\r\n            \r\n        </div>         \r\n    )\r\n}\r\nexport default CalendarPage","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\AddGame.js",["120","121","122","123"],"import { connect, useDispatch } from \"react-redux\"\r\nimport React, {useState, useEffect} from 'react'\r\nimport { Dialog, DialogContent, DialogContentText, DialogTitle, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup, TextField, Checkbox, DialogActions, Button } from \"@material-ui/core\"\r\nimport { closeAddGame, setDataAddGame, resetAddGame } from \"../redux/actions\"\r\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\"\r\nimport moment from 'moment'\r\nimport MomentUtils from '@date-io/moment'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport PhoneMask from \"../features/PhoneMask\"\r\nimport Addres from \"../features/Addres\"\r\n\r\n\r\nconst AddGame = ({ open, data, token,city,selectedDay }) => {\r\n    const [localeData, setLocaleData] = useState({\r\n        date: moment(selectedDay),\r\n        time: moment(),\r\n        duration: String(data.duration),\r\n        clientId: '',\r\n        clientName: '',\r\n        clientPhone: '',\r\n        wasBefore: false\r\n    })\r\n    const {request, loading} = useHttp()\r\n    const [suggestion, setSuggestion] = useState([])\r\n    const handleChange = (e) => {\r\n        setLocaleData({...localeData, [e.target.name]: e.target.value})\r\n    }\r\n    useEffect(()=>{\r\n        let getTimeArray = moment(localeData.time).format('HH:mm:ss').split(':')\r\n        let TimeMilli = (getTimeArray[0] * 3600000) + (getTimeArray[1] * 60000)\r\n        let e = {\r\n            name: 'date',\r\n            value: moment(localeData.date).valueOf() + TimeMilli\r\n        }\r\n        dispatch(setDataAddGame(e))\r\n    },[localeData.date,localeData.time])\r\n    useEffect(()=>{\r\n        setLocaleData({...localeData, date: moment(selectedDay)})\r\n    }, [selectedDay])\r\n    const selectClient = (e) => {\r\n        setLocaleData({...localeData,\r\n            clientId: e._id,\r\n            clientName: e.name,\r\n            clientPhone: e.phone,\r\n        })\r\n        let data = {\r\n            name: 'client',\r\n            value: e._id\r\n        }\r\n        dispatch(setDataAddGame(data))\r\n        setSuggestion([])\r\n    }\r\n    const searchClient = async(number) => {\r\n        if(number.length > 4)\r\n        {try {\r\n                const req = await request('api/games/getclient', 'POST', {phone: number}, {\r\n                    Authorization: `Bearer ${token}`\r\n                })\r\n                setSuggestion(req)\r\n        } catch (error) {\r\n            \r\n        }}\r\n    }\r\n    const createClient = async(data) => {\r\n        try {\r\n            const req = await request('api/games/createclient','POST', data, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            selectClient(req)\r\n            return true\r\n        } catch (error) {\r\n            return false\r\n        }\r\n    }\r\n    const dispatch = useDispatch()\r\n    const handleClose = () => { dispatch(closeAddGame()) }\r\n    const changeMainState = (e) => {\r\n        dispatch(setDataAddGame(e.target))\r\n    }\r\n    const [reset, setReset] = useState(false)\r\n    useEffect(()=>{\r\n        if(reset===true){\r\n            setLocaleData({\r\n                date: moment(),\r\n                time: moment(),\r\n                duration: String(data.duration),\r\n                clientId: '',\r\n                clientName: '',\r\n                clientPhone: '',\r\n                wasBefore: false\r\n            })\r\n            setSuggestion([])\r\n            dispatch(resetAddGame())\r\n            setReset(false)\r\n        }\r\n    }, [reset])\r\n    const sendData = async() => {\r\n        try {\r\n                const res = await request('api/games/creategame', 'POST', {...data, age: 1}, {\r\n                    Authorization: `Bearer ${token}`\r\n                })\r\n                console.log(res)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    } \r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Создание игры</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Введите данные игры:\r\n                    </DialogContentText>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                    <KeyboardDatePicker\r\n                        style={{marginRight: 10}}\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-dialog\"\r\n                        label=\"Дата проведения игры\"\r\n                        format='DD/MM/YYYY'\r\n                        value={moment(localeData.date,'DD/MM/YYYY')}\r\n                        onChange={(date)=>{let e={target:{name: 'date', value: date}}; handleChange(e)}}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                    />\r\n                    <KeyboardTimePicker\r\n                            margin=\"normal\"\r\n                            id=\"time-picker\"\r\n                            label=\"Выберите время\"\r\n                            value={localeData.time}\r\n                            onChange={(date) => { let e = { target: { name: 'time', value: date } }; handleChange(e) }}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <FormControl component='fieldset'>\r\n                        <FormLabel component='legend'>Продолжительность</FormLabel>\r\n                        <RadioGroup row={true} aria-label=\"gender\" name=\"duration\" value={localeData.duration} onChange={(e)=>{handleChange(e); dispatch(setDataAddGame(e.target))}}>\r\n                            <FormControlLabel value={'1'} control={<Radio></Radio>} label='1 час'/>\r\n                            <FormControlLabel value={'1.5'} control={<Radio></Radio>} label='1.5 часа'/>\r\n                            <FormControlLabel value={'2'} control={<Radio></Radio>} label='2 часа'/>\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                    <PhoneMask reset={reset} suggestion={suggestion} searchClient={searchClient} createClient={createClient} selectClient={selectClient} disabled={localeData.clientId.length > 0}></PhoneMask>\r\n                    <div style={{paddingTop: 10, paddingBottom: 10}}>\r\n                        <TextField onChange={changeMainState}  style={{marginRight: 10}} type='Number' name=\"col\" inputProps={{ step: 1, min: 6 }} label=\"Количество\" variant=\"outlined\" />\r\n                        <TextField onChange={changeMainState}  style={{marginRight: 10}} type='Number' name=\"summ\" inputProps={{ step: 100, min: 0 }} label=\"Сумма\" variant=\"outlined\" />\r\n                        <TextField onChange={changeMainState}  style={{marginRight: 10, marginTop: 10}} type='Number' name=\"prepay\" inputProps={{ step: 100, min: 0 }} label=\"Предоплата\" variant=\"outlined\" />\r\n                    </div>\r\n                    <FormControl>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                  checked={data.type}\r\n                                  onChange={(e) =>{data={target:{name: 'type', value: e.target.checked}}; changeMainState(data)}}\r\n                                  name=\"type\"\r\n                                  color=\"primary\"\r\n                                />\r\n                              }\r\n                              label=\"Выезд\"\r\n                        />\r\n                    </FormControl>\r\n                    {data.type?<Addres prem={city} reset={reset} onSelect={changeMainState}></Addres>:''}\r\n                    <FormControl>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                  checked={localeData.wasBefore}\r\n                                  onChange={()=>{setLocaleData({...localeData, wasBefore: !localeData.wasBefore}); let data = {target: {name: 'evening', value: 0}}; changeMainState(data)}}\r\n                                  name=\"type\"\r\n                                  color=\"primary\"\r\n                                />\r\n                              }\r\n                              label=\"Были до этого?\"\r\n                        />\r\n                        {localeData.wasBefore?<TextField onChange={changeMainState} type='Number' name='evening' value={data.evening} inputProps={{ step: 1 }} label=\"Сколько раз\" variant=\"outlined\"/>:''}\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                  checked={data.child}\r\n                                  onChange={(e) =>{data={target:{name: 'child', value: e.target.checked}}; changeMainState(data)}}\r\n                                  name=\"child\"\r\n                                  color=\"primary\"\r\n                                />\r\n                              }\r\n                              label=\"Дети\"\r\n                        />\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={() => setReset(true)} color=\"primary\">\r\n            Сбросить\r\n          </Button>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n            Отменить\r\n          </Button>\r\n          <Button onClick={sendData} color=\"primary\">\r\n            Создать\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedDay: state.calendar.selectedDay,\r\n        open: state.addGame.open,\r\n        data: state.addGame.data,\r\n        token: state.auth.token,\r\n        city: state.auth.city\r\n    }\r\n}\r\nexport default connect(mapStateToProps, null)(AddGame)","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\toggle.js",["124","125","126"],"\r\nimport anime from 'animejs'\r\nimport React from 'react'\r\nexport const toggle = () => {\r\n    const notes = []\r\n    document.body.style.overflow = 'hidden'\r\n    const addnote = (text, title='Уведомление') => {\r\n        notes.push({\r\n            text: text,\r\n            title: title,\r\n            id: notes.length\r\n        })\r\n        show(text,title,notes.length)\r\n        console.log(notes)\r\n    }\r\n    const show = async(text='текст',title='Уведомление',id) => {\r\n        function sleep(ms) {\r\n            return new Promise(resolve => setTimeout(resolve, ms));\r\n          }\r\n        if(notes.length > 0){\r\n            var x = [...document.getElementsByClassName('toglefield')]\r\n            for(var key in x){\r\n                var initial = Number(  window.screen.height - x[key].offsetTop) - 100\r\n                var number = x[key].getAttribute('id')\r\n                console.log(initial)\r\n                anime({\r\n                    targets: `#${number}`,\r\n                    bottom: initial,\r\n                    duration: 500\r\n                })\r\n            }\r\n        }\r\n        document.getElementById('root').insertAdjacentHTML('beforeend', \r\n        `<div class='toglefield' id='k${id-1}'style='width: 300px;\r\n        min-height: 80px;\r\n        background-color: rgba(0, 0, 0, 0.9);\r\n        border-radius: 5px;\r\n        position: absolute;\r\n        bottom: 20px;\r\n        right: -400px;\r\n        color: white;\r\n        padding: 5px;\r\n        word-wrap: break-word;\r\n        padding-left: 10px;\r\n        '>\r\n            <h4 style='\r\n                margin: 0\r\n            '>${title}</h4>\r\n            <p style='margin: 0'>${text}</p>\r\n        </div>`\r\n        )\r\n        const first = anime({\r\n            targets: `#k${id-1}`,\r\n            right: 20,\r\n            duration: 500\r\n        })\r\n        await sleep(5000)\r\n        const end = anime({\r\n            targets: `#k${id-1}`,\r\n            right: -400,\r\n            duration: 500\r\n        })\r\n        await sleep(500)\r\n        document.getElementById('k'+(id-1)).remove()\r\n        console.log(id)\r\n        notes.splice(id-1)\r\n    }\r\n    return{show, addnote}\r\n}\r\nexport default toggle","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\City.js",[],"C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\CalendarItem.js",["127","128","129"],"import { connect, useDispatch } from \"react-redux\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { nextMonth, prevMonth, currentDay, selectDay, loadGame } from \"../redux/actions\";\r\nimport {useHttp} from '../hooks/http.hook'\r\nconst CalendarItem = ({thisDay,games, token}) => {\r\n    const [calendar, setCalendar] = useState([\r\n\r\n    ])\r\n    const dispatch = useDispatch()\r\n    const calendarInit = (thisDay) => {\r\n        const firstDay = moment(moment(thisDay).format('M/Y'),'M/Y').valueOf()\r\n        const firstDate = firstDay - ((moment(firstDay).isoWeekday() - 1) * 86400000 )\r\n        const nextMonth = moment(moment(thisDay).format('M/Y'),'M/Y').add(1, 'M').valueOf()\r\n        const lastDay = nextMonth + (( 7 - moment(nextMonth).isoWeekday() + 1) * 86400000)\r\n        const newCalendar = []\r\n        for(let i = Number(firstDate); i < Number(lastDay); i = i + 86400000){\r\n            newCalendar.push(moment(i).format('D/M/Y'))\r\n        }\r\n        setCalendar(newCalendar)\r\n    }\r\n    useEffect(()=>{\r\n        moment.locale('ru')\r\n        calendarInit(thisDay)\r\n    },[thisDay])\r\n    const {request, loading} = useHttp()\r\n    const loadData = async() => {\r\n        try {\r\n            const res = await request('api/games/loadgames', 'POST', {month: moment(moment(thisDay).format('M/Y'),'M/Y').valueOf()}, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            dispatch(loadGame(res))\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        loadData()\r\n    },[thisDay])\r\n    if(loading === true){\r\n        return <div>...Loading</div>\r\n    }\r\n    var weekHub = []\r\n    return(\r\n        <React.Fragment>\r\n            <div className='box'>\r\n                <div className='calendarNavigation'>\r\n                    <p className='buttonToThisDay' onClick={()=>dispatch(currentDay())}>СЕГОДНЯ</p>\r\n                    <div className='dateAndNavi'>\r\n                        <div className='calendarIcon' onClick={()=>dispatch(prevMonth(thisDay))}>\r\n                            <FontAwesomeIcon icon={faArrowLeft}></FontAwesomeIcon>\r\n                        </div>    \r\n                            <p className='monthNav'>{moment(thisDay).format('MMMM Y')}</p>\r\n                        <div className=\"calendarIcon\" onClick={()=>dispatch(nextMonth(thisDay))}>\r\n                            <FontAwesomeIcon icon={faArrowRight}></FontAwesomeIcon>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {calendar.map((day,i) => {\r\n                const date = day\r\n                weekHub.push(date)\r\n\r\n                if (((i + 1) % 7) === 0) {\r\n                    const render = weekHub\r\n                    const week = moment(day, 'D/M/Y').format('W')\r\n                    weekHub = []\r\n                    return <div key={week} className={(calendar.length / 7) === 4?'week week4':(calendar.length / 7) === 5 ? 'week week5':(calendar.length / 7) === 6?'week week6':''} >\r\n                        <div className='weekNumber'>{week}</div>\r\n                        {render.map((day) => {\r\n                            return (\r\n                                <div className={day===moment().format('D/M/Y')? 'currentDay day': 'day'} onClick={(e)=>dispatch(selectDay(e))}data={moment(day,'D/M/Y').valueOf()} key={moment(day,'D/M/Y').valueOf()}>\r\n                                    <div className='dayHead'>{moment(day,'D/M/Y').format('D')}</div>\r\n                                    <div className='dayBody'>\r\n                                    {games.map((game)=>{\r\n                                        if(moment(game.date).format('D/M/Y') === day){\r\n                                            return(\r\n                                                <div className={game.type === 0? 'game': game.type === 1? 'game outSide': game.type === 2? 'game kids': ''} key={game._id}>\r\n                                                    {moment(game.date).format('HH:mm')}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    })}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n                \r\n            })}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n   return{\r\n        thisDay: state.calendar.thisDay,\r\n        games: state.calendar.games,\r\n        selectedMonth: state.calendar.selectedMonth,\r\n        token: state.auth.token\r\n   } \r\n}\r\nexport default connect(mapStateToProps,null)(CalendarItem)","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\Pages\\SelectedDay.js",["130","131","132"],"import { connect, useDispatch } from \"react-redux\"\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../assets/selectedDay.css'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle, faPlus  } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { addGame, openAddGame } from \"../redux/actions\";\r\nconst SelectedDay = ({selectedDay,games}) => {\r\n    const dispatch = useDispatch()\r\n    const [gamesToRender,setGamesToRender] = useState([])\r\n    const init = () => {\r\n        let newState = []\r\n         games.map((game)=>{\r\n             if(moment(game.date).format('D/M/Y')===moment(selectedDay).format('D/M/Y')){\r\n                 console.log(game)\r\n                 newState.push(game)\r\n             }\r\n         })\r\n         setGamesToRender(newState)\r\n    } \r\n    useEffect(()=>{\r\n        init()\r\n    },[selectedDay])\r\n    return(\r\n        <React.Fragment>\r\n            <div className='selectedDayHead'>\r\n                <div className='dateInSelectedDay'>\r\n                    {moment(selectedDay).format('dddd D MMM')}\r\n                </div>\r\n                <div className='addGameInSelectedDay' onClick={()=>dispatch(openAddGame())}>\r\n                    <div className='addIconBox'><FontAwesomeIcon icon={faPlus}></FontAwesomeIcon></div>\r\n                </div>\r\n            </div>\r\n            {\r\n                gamesToRender.map((game)=>{\r\n                    return (\r\n                        <div key={game._id} className={game.type === 1 ? 'gameInSelectedDay gameInSelectedDayInStudio':'gameInSelectedDay gameInSelectedDayOutDoor'}>\r\n                            <div className='game-leftSide'>\r\n                            <div className='gameCol'>P:23</div>\r\n                            <div className='gameType'>$: 23000 Р</div>\r\n                            </div>\r\n                            <div className='game-rightSide'>\r\n                                <div className='gameTime'>{moment(game.date).format('HH:mm')}</div>\r\n                                <div className={game.prepay!=null? 'StatusGreen':'StatusYellow'}>Предоплата <FontAwesomeIcon icon={faCircle}/></div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        selectedDay: state.calendar.selectedDay,\r\n        games: state.calendar.games\r\n    }\r\n}\r\nexport default connect(mapStateToProps,null)(SelectedDay)","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\PhoneMask.js",["133","134"],"import React, { useState, useEffect } from \"react\"\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Dialog, DialogContentText, DialogTitle, DialogContent } from \"@material-ui/core\";\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport moment from 'moment'\r\n\r\nconst PhoneMask = ({ suggestion, searchClient, createClient, disabled, selectClient, reset }) => {\r\n    const [data, setData] = useState({\r\n        realValue: '',\r\n        maskedValue: '',\r\n        initValue: '+7(___)-___-____',\r\n        count: 3,\r\n        name: ''\r\n    })\r\n    useEffect(() => {\r\n        if (reset === true) {\r\n            setData({\r\n                realValue: '',\r\n                maskedValue: '',\r\n                initValue: '+7(___)-___-____',\r\n                count: 3,\r\n                name: ''\r\n            })\r\n        }\r\n    }, [reset])\r\n    const handlechange = (e) => {\r\n        if (e === null) {\r\n            return 0\r\n        }\r\n        if (e.type === 'change') {\r\n            if (e.target.value.length < data.maskedValue.length) {\r\n                if (data.count !== 3) {\r\n                    let newVol = ''\r\n                    for (let i = 0; i < data.realValue.length - 1; i++) {\r\n                        newVol = newVol + data.realValue[i]\r\n                    }\r\n                    let newMaskedValue = ''\r\n                    let newCount = data.count - 1\r\n                    const arr = [11, 7, 6]\r\n                    for (let i in arr) {\r\n                        if (newCount === arr[i]) newCount--\r\n                    }\r\n                    for (let i = 0; i < newCount; i++) {\r\n                        if (i == newCount) {\r\n                            newMaskedValue = newMaskedValue + data.initValue[i]\r\n                        } else {\r\n                            newMaskedValue = newMaskedValue + data.maskedValue[i]\r\n                        }\r\n                    }\r\n\r\n                    setData(prev => {\r\n                        return ({ ...data, realValue: newVol, maskedValue: newMaskedValue, count: newCount })\r\n                    }\r\n                    )\r\n                    console.log(newVol, '  ', newMaskedValue, '  ', newCount)\r\n                    searchClient('7' + newVol)\r\n                }\r\n                return 0\r\n            }\r\n            if (typeof Number(e.target.value[e.target.value.length - 1]) === 'number' && isFinite(Number(e.target.value[e.target.value.length - 1]))) {\r\n                if (data.count !== 16) {\r\n                    let newVol = data.realValue + e.target.value[e.target.value.length - 1]\r\n                    let newMaskedValue = ''\r\n                    for (let i = 0; i <= data.count; i++) {\r\n                        if (i == data.count) {\r\n                            newMaskedValue = newMaskedValue + e.target.value[e.target.value.length - 1]\r\n                        } else {\r\n                            if (data.initValue[i] !== '_') {\r\n                                newMaskedValue = newMaskedValue + data.initValue[i]\r\n                            } else {\r\n                                newMaskedValue = newMaskedValue + data.maskedValue[i]\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    let newCount = data.count + 1\r\n                    const arr = [6, 7, 11]\r\n                    for (let i in arr) {\r\n                        if (newCount === arr[i]) newCount++\r\n                    }\r\n                    setData({ ...data, realValue: newVol, maskedValue: newMaskedValue, count: newCount }, console.log(data.realValue))\r\n                    searchClient('7' + newVol)\r\n                    console.log(suggestion)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handleSelect = (e, newValue) => {\r\n        if (newValue !== null) {\r\n            console.log(newValue)\r\n            if (newValue.hasOwnProperty('newClient')) {\r\n                setOnCreate(true)\r\n            } else {\r\n                let maskedPhone = newValue.phone.slice(1)\r\n                let localeNew = ''\r\n                let i = 0\r\n                for (let key in data.initValue) {\r\n                    if (data.initValue[key] === '_') {\r\n                        localeNew = localeNew + maskedPhone[i]\r\n                        i++\r\n                    } else {\r\n                        localeNew = localeNew + data.initValue[key]\r\n                    }\r\n                }\r\n                selectClient(newValue)\r\n                setData({ ...data, maskedValue: localeNew })\r\n            }\r\n        } else {\r\n            setData({\r\n                realValue: '',\r\n                maskedValue: '',\r\n                initValue: '+7(___)-___-____',\r\n                count: 3,\r\n                name: ''\r\n            })\r\n        }\r\n    }\r\n    const [onCreate, setOnCreate] = useState(false)\r\n    const create = async () => {\r\n        const newClientToServer = {\r\n            phone: '7' + data.realValue,\r\n            clientName: data.name,\r\n            date: moment().valueOf()\r\n        }\r\n        const req = await createClient(newClientToServer)\r\n        if (req) {\r\n            setOnCreate(false)\r\n        } else {\r\n            alert('Что то пошло не так, попробуйте еще раз')\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Autocomplete\r\n                disabled={disabled}\r\n                onInputChange={handlechange}\r\n                id=\"PhoneMaskedInput\"\r\n                inputValue={data.maskedValue}\r\n                options={suggestion}\r\n                onDoubleClick={disabled ? () => {\r\n                    let e = { name: '', _id: '', phone: '' }; selectClient(e); setData({\r\n                        realValue: '',\r\n                        maskedValue: '',\r\n                        initValue: '+7(___)-___-____',\r\n                        count: 3,\r\n                        name: ''\r\n                    })\r\n                } : null}\r\n                getOptionLabel={(option) => {\r\n                    if (!option.hasOwnProperty('newClient')) {\r\n                        let maskedPhone = option.phone.slice(1)\r\n                        let newValue = ''\r\n                        let i = 0\r\n                        for (let key in data.initValue) {\r\n                            if (data.initValue[key] === '_') {\r\n                                newValue = newValue + maskedPhone[i]\r\n                                i++\r\n                            } else {\r\n                                newValue = newValue + data.initValue[key]\r\n                            }\r\n                        }\r\n\r\n                        return `${option.name}: ${newValue}`\r\n                    }\r\n                    else return option.phone\r\n                }}\r\n                onChange={handleSelect}\r\n                filterOptions={(options, params) => {\r\n                    options.push({\r\n                        inputValue: params.inputValue,\r\n                        phone: `Создать пользователя: ${params.inputValue}`,\r\n                        newClient: true\r\n                    });\r\n                    return options\r\n                }}\r\n                style={{ width: 'auto' }}\r\n                renderInput={(params) => <TextField {...params} label='Телефон клиента' variant=\"outlined\" />}\r\n            />\r\n            <Dialog open={onCreate} onClose={() => setOnCreate(false)} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Новый Клиент</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Введите данные:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Имя\"\r\n                        type=\"name\"\r\n                        onChange={(e) => setData({ ...data, name: e.target.value })}\r\n                        fullWidth\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"phone\"\r\n                        label=\"Телефон\"\r\n                        type=\"phone\"\r\n                        value={data.maskedValue}\r\n                        onChange={handlechange}\r\n                        fullWidth\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOnCreate(false)} color=\"primary\">\r\n                        Отменить\r\n          </Button>\r\n                    <Button onClick={create} color=\"primary\">\r\n                        Создать\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\nexport default PhoneMask","C:\\Users\\user\\Desktop\\Show Today\\ShowTodayWEBPREDPROD\\src\\features\\Addres.js",[],["135","136"],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":12,"column":20,"nodeType":"143","messageId":"144","endLine":12,"endColumn":27},{"ruleId":"145","severity":1,"message":"146","line":18,"column":7,"nodeType":"147","endLine":18,"endColumn":9,"suggestions":"148"},{"ruleId":"141","severity":1,"message":"149","line":6,"column":10,"nodeType":"143","messageId":"144","endLine":6,"endColumn":22},{"ruleId":"141","severity":1,"message":"150","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":12},{"ruleId":"141","severity":1,"message":"151","line":10,"column":11,"nodeType":"143","messageId":"144","endLine":10,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"153","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":10,"suggestions":"154"},{"ruleId":"141","severity":1,"message":"155","line":1,"column":10,"nodeType":"143","messageId":"144","endLine":1,"endColumn":16},{"ruleId":"141","severity":1,"message":"156","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":25},{"ruleId":"141","severity":1,"message":"157","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":14},{"ruleId":"141","severity":1,"message":"158","line":4,"column":10,"nodeType":"143","messageId":"144","endLine":4,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":23,"column":21,"nodeType":"143","messageId":"144","endLine":23,"endColumn":28},{"ruleId":"145","severity":1,"message":"159","line":36,"column":7,"nodeType":"147","endLine":36,"endColumn":40,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":21,"suggestions":"162"},{"ruleId":"145","severity":1,"message":"163","line":96,"column":8,"nodeType":"147","endLine":96,"endColumn":15,"suggestions":"164"},{"ruleId":"141","severity":1,"message":"165","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":13},{"ruleId":"141","severity":1,"message":"166","line":52,"column":15,"nodeType":"143","messageId":"144","endLine":52,"endColumn":20},{"ruleId":"141","severity":1,"message":"167","line":58,"column":15,"nodeType":"143","messageId":"144","endLine":58,"endColumn":18},{"ruleId":"145","severity":1,"message":"168","line":42,"column":7,"nodeType":"147","endLine":42,"endColumn":16,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":62,"column":35,"nodeType":"172","messageId":"173","endLine":62,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":77,"column":54,"nodeType":"172","messageId":"173","endLine":77,"endColumn":56},{"ruleId":"141","severity":1,"message":"174","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":17},{"ruleId":"170","severity":1,"message":"175","line":13,"column":26,"nodeType":"172","messageId":"176","endLine":13,"endColumn":28},{"ruleId":"145","severity":1,"message":"177","line":23,"column":7,"nodeType":"147","endLine":23,"endColumn":20,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":46,"column":31,"nodeType":"181","messageId":"182","endLine":46,"endColumn":33},{"ruleId":"179","severity":1,"message":"180","line":67,"column":31,"nodeType":"181","messageId":"182","endLine":67,"endColumn":33},{"ruleId":"137","replacedBy":"183"},{"ruleId":"139","replacedBy":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'reconnect'. Either include it or remove the dependency array.","ArrayExpression",["187"],"'resetAddGame' is defined but never used.","'logo' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useCallback has missing dependencies: 'addnote' and 'dispatch'. Either include them or remove the dependency array.",["188"],"'faPlus' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'moment' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'localeData'. Either include it or remove the dependency array. You can also do a functional update 'setLocaleData(l => ...)' if you only need 'localeData' in the 'setLocaleData' call.",["190"],"React Hook useEffect has missing dependencies: 'data.duration' and 'dispatch'. Either include them or remove the dependency array. If 'setLocaleData' needs the current value of 'data.duration', you can also switch to useReducer instead of useState and read 'data.duration' in the reducer.",["191"],"'React' is defined but never used.","'first' is assigned a value but never used.","'end' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["192"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'addGame' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["193"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["185"],["186"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [reconnect]",{"range":"208","text":"209"},"Update the dependencies array to be: [addnote, dispatch]",{"range":"210","text":"211"},"Update the dependencies array to be: [dispatch, localeData.date, localeData.time]",{"range":"212","text":"213"},"Update the dependencies array to be: [localeData, selectedDay]",{"range":"214","text":"215"},"Update the dependencies array to be: [data.duration, dispatch, reset]",{"range":"216","text":"217"},"Update the dependencies array to be: [loadData, thisDay]",{"range":"218","text":"219"},"Update the dependencies array to be: [init, selectedDay]",{"range":"220","text":"221"},[679,681],"[reconnect]",[1293,1295],"[addnote, dispatch]",[1576,1609],"[dispatch, localeData.date, localeData.time]",[1707,1720],"[localeData, selectedDay]",[3444,3451],"[data.duration, dispatch, reset]",[1758,1767],"[loadData, thisDay]",[876,889],"[init, selectedDay]"]